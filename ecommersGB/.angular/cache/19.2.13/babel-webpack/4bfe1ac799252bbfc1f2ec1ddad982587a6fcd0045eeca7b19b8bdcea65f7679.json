{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nahuel/Documents/Proyectos/PAngular-master/PAngular-master/ecommersGB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport { getDbReference, getNodeValue, listenToNode } from '../firebase.init';\nimport * as i0 from \"@angular/core\";\nexport let ProductosService = /*#__PURE__*/(() => {\n  class ProductosService {\n    /** Stream en tiempo real de /productos */\n    obtenerProductos() {\n      return new Observable(subscriber => {\n        let off;\n        // snapshot inicial\n        getNodeValue('/productos').then(obj => subscriber.next(this.mapColeccion(obj))).catch(err => subscriber.error(err));\n        // onValue\n        listenToNode('/productos', obj => {\n          subscriber.next(this.mapColeccion(obj));\n        }).then(fn => off = fn).catch(err => subscriber.error(err));\n        return () => off?.();\n      });\n    }\n    /** Crear producto con id numérico incremental */\n    crearProducto(producto) {\n      return _asyncToGenerator(function* () {\n        const obj = yield getNodeValue('/productos');\n        const ids = Object.keys(obj ?? {});\n        const nums = ids.map(id => Number(id)).filter(n => !isNaN(n));\n        const nextId = (nums.length ? Math.max(...nums) : 0) + 1;\n        const refRoot = yield getDbReference('/');\n        const {\n          update\n        } = yield import('firebase/database');\n        const nuevo = {\n          id: nextId,\n          nombre: producto.nombre ?? '',\n          descripcion: producto.descripcion ?? '',\n          precio: Number(producto.precio ?? 0),\n          stock: Number(producto.stock ?? 0),\n          imagen: producto.imagen ?? ''\n        };\n        yield update(refRoot, {\n          [`productos/${nextId}`]: {\n            nombre: nuevo.nombre,\n            descripcion: nuevo.descripcion,\n            precio: nuevo.precio,\n            stock: nuevo.stock,\n            imagen: nuevo.imagen\n          }\n        });\n        return nextId;\n      })();\n    }\n    /** Obtener uno por id */\n    obtenerProductoPorId(id) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const p = yield getNodeValue(`/productos/${id}`);\n        if (!p) return null;\n        return _this.mapProducto(String(id), p);\n      })();\n    }\n    /** Actualizar */\n    actualizarProducto(producto) {\n      return _asyncToGenerator(function* () {\n        const ref = yield getDbReference(`/productos/${producto.id}`);\n        const {\n          update\n        } = yield import('firebase/database');\n        yield update(ref, {\n          nombre: producto.nombre,\n          descripcion: producto.descripcion,\n          precio: Number(producto.precio ?? 0),\n          stock: Number(producto.stock ?? 0),\n          imagen: producto.imagen ?? ''\n        });\n      })();\n    }\n    /** Eliminar */\n    eliminarProducto(id) {\n      return _asyncToGenerator(function* () {\n        const ref = yield getDbReference(`/productos/${id}`);\n        const {\n          remove\n        } = yield import('firebase/database');\n        yield remove(ref);\n      })();\n    }\n    // ---------- helpers ----------\n    mapColeccion(obj) {\n      return Object.entries(obj ?? {}).map(([id, p]) => this.mapProducto(id, p));\n    }\n    mapProducto(id, p) {\n      return {\n        id: Number(id),\n        nombre: p?.nombre ?? '',\n        descripcion: p?.descripcion ?? '',\n        precio: Number(p?.precio ?? 0),\n        stock: Number(p?.stock ?? 0),\n        imagen: p?.imagen ?? ''\n      };\n    }\n    static {\n      this.ɵfac = function ProductosService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ProductosService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductosService,\n        factory: ProductosService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProductosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}