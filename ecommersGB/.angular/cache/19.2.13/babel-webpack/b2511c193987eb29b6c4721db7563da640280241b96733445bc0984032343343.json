{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nahuel/Documents/Proyectos/PAngular-master/PAngular-master/ecommersGB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { get, ref } from 'firebase/database';\nimport { signInWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { getFirebase } from '../firebase.init';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    usuarioSubject = new BehaviorSubject(null);\n    usuario$ = this.usuarioSubject.asObservable();\n    constructor() {\n      var _this = this;\n      // Rehidratar sesión desde Firebase Auth (después de recarga)\n      getFirebase().then(({\n        auth,\n        database\n      }) => {\n        onAuthStateChanged(auth, /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (u) {\n            if (!u) {\n              _this.usuarioSubject.next(null);\n              if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem('usuarioActual');\n              }\n              return;\n            }\n            // 🔍 Leer el rol desde RTDB (/users/{uid})\n            let role = 'user';\n            try {\n              const snap = yield get(ref(database, `users/${u.uid}`));\n              if (snap.exists()) {\n                const data = snap.val();\n                role = data?.role ?? 'user';\n              }\n            } catch {\n              role = 'user';\n            }\n            const usuario = {\n              uid: u.uid,\n              email: u.email,\n              role,\n              displayName: u.displayName ?? u.email ?? ''\n            };\n            _this.usuarioSubject.next(usuario);\n            if (typeof localStorage !== 'undefined') {\n              localStorage.setItem('usuarioActual', JSON.stringify(usuario));\n            }\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      });\n    }\n    /** Login con email y password + carga de rol */\n    login(email, password) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const {\n          auth,\n          database\n        } = yield getFirebase();\n        const cred = yield signInWithEmailAndPassword(auth, email, password);\n        const u = cred.user;\n        let role = 'user';\n        try {\n          const snap = yield get(ref(database, `users/${u.uid}`));\n          if (snap.exists()) {\n            const data = snap.val();\n            role = data?.role ?? 'user';\n          }\n        } catch {\n          role = 'user';\n        }\n        const usuario = {\n          uid: u.uid,\n          email: u.email,\n          role,\n          displayName: u.displayName ?? u.email ?? ''\n        };\n        _this2.usuarioSubject.next(usuario);\n        if (typeof localStorage !== 'undefined') {\n          localStorage.setItem('usuarioActual', JSON.stringify(usuario));\n        }\n        return usuario;\n      })();\n    }\n    /** Logout general */\n    logout() {\n      this.usuarioSubject.next(null);\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('usuarioActual');\n      }\n      // Descomentá si querés cerrar sesión Firebase también:\n      // getFirebase().then(({ auth }) => signOut(auth));\n    }\n    /** Devuelve el usuario actual (sincrónico) */\n    getUsuarioActual() {\n      return this.usuarioSubject.value;\n    }\n    /** Devuelve el usuario de Firebase (asincrónico) */\n    getCurrentAuthUser() {\n      return _asyncToGenerator(function* () {\n        const {\n          auth\n        } = yield getFirebase();\n        if (auth.currentUser) return auth.currentUser;\n        return new Promise(resolve => {\n          const off = onAuthStateChanged(auth, u => {\n            off(); // desuscribir\n            resolve(u);\n          });\n        });\n      })();\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}