{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nahuel/Documents/Proyectos/PAngular-master/PAngular-master/ecommersGB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Chart from 'chart.js/auto';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../servicios/factura.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"ventasChart\"];\nconst _c1 = [\"dolarChart\"];\nconst _c2 = [\"productosChart\"];\nfunction EstadisticasComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorDolar, \"\\n\");\n  }\n}\nexport let EstadisticasComponent = /*#__PURE__*/(() => {\n  class EstadisticasComponent {\n    facturaSrv;\n    http;\n    // ----- CANVAS -----\n    ventasChartRef;\n    dolarChartRef;\n    productosChartRef;\n    // ----- INSTANCIAS CHART -----\n    chartVentas = null;\n    chartDolar = null;\n    chartProductos = null;\n    // ----- ESTADO UI -----\n    periodo = 'dia'; // ventas\n    rangoDolarDias = 7; // dólar\n    errorDolar = '';\n    constructor(facturaSrv, http) {\n      this.facturaSrv = facturaSrv;\n      this.http = http;\n    }\n    ngAfterViewInit() {\n      this.renderVentas();\n      this.cargarDolar(7);\n    }\n    // =======================\n    //      VENTAS\n    // =======================\n    actualizarAgrupacion(nuevoPeriodo) {\n      this.periodo = nuevoPeriodo;\n      this.renderVentas();\n    }\n    renderVentas() {\n      this.facturaSrv.facturas$().subscribe(facturas => {\n        // ---- Agrupar por día/semana/mes\n        const agrupadas = {};\n        facturas.forEach(f => {\n          const fecha = new Date(f.fechaISO);\n          let clave;\n          switch (this.periodo) {\n            case 'semana':\n              {\n                const firstDayOfWeek = new Date(fecha);\n                firstDayOfWeek.setDate(fecha.getDate() - fecha.getDay());\n                clave = firstDayOfWeek.toISOString().slice(0, 10);\n                break;\n              }\n            case 'mes':\n              clave = `${fecha.getFullYear()}-${(fecha.getMonth() + 1).toString().padStart(2, '0')}`;\n              break;\n            default:\n              clave = fecha.toISOString().slice(0, 10);\n          }\n          agrupadas[clave] = (agrupadas[clave] || 0) + 1;\n        });\n        const labels = Object.keys(agrupadas).sort();\n        const data = labels.map(k => agrupadas[k]);\n        if (this.chartVentas) this.chartVentas.destroy();\n        this.chartVentas = new Chart(this.ventasChartRef.nativeElement, {\n          type: 'bar',\n          data: {\n            labels,\n            datasets: [{\n              label: `Ventas por ${this.periodo}`,\n              data,\n              backgroundColor: '#007bff'\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                display: true\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n        this.graficarProductosMasVendidos(facturas);\n      });\n    }\n    // =======================\n    //      DÓLAR (rango)\n    // =======================\n    cargarDolar(dias) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.rangoDolarDias = dias;\n        _this.errorDolar = '';\n        try {\n          const res = yield _this.http.get('https://dolarapi.com/v1/dolares/oficial').toPromise();\n          const valorActual = Number(res?.venta) || 0;\n          const {\n            labels,\n            valores\n          } = _this.generarSerieHistorica(valorActual, dias);\n          _this.dibujarGraficoDolar(labels, valores, dias);\n        } catch (err) {\n          console.error('Error al obtener DolarApi:', err);\n          _this.errorDolar = 'No se pudo obtener la cotización. Intentá nuevamente.';\n          _this.dibujarGraficoDolar([], [], dias);\n        }\n      })();\n    }\n    generarSerieHistorica(valorHoy, dias) {\n      const labels = [];\n      const valores = [];\n      const hoy = new Date();\n      let base = valorHoy > 0 ? valorHoy : 1200;\n      for (let i = dias - 1; i >= 0; i--) {\n        const d = new Date(hoy);\n        d.setDate(hoy.getDate() - i);\n        const ruido = (Math.random() - 0.5) * (base * 0.02);\n        base = Math.max(1, base + ruido);\n        labels.push(d.toISOString().slice(0, 10));\n        valores.push(Number(base.toFixed(2)));\n      }\n      return {\n        labels,\n        valores\n      };\n    }\n    dibujarGraficoDolar(labels, valores, dias) {\n      if (this.chartDolar) {\n        this.chartDolar.destroy();\n        this.chartDolar = null;\n      }\n      this.chartDolar = new Chart(this.dolarChartRef.nativeElement, {\n        type: 'line',\n        data: {\n          labels,\n          datasets: [{\n            label: `USD/ARS últimos ${dias} días`,\n            data: valores,\n            borderColor: '#28a745',\n            backgroundColor: 'rgba(40, 167, 69, 0.15)',\n            fill: true,\n            tension: 0.3,\n            pointRadius: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: false\n            }\n          }\n        }\n      });\n    }\n    /* Productos mas vendidos */\n    graficarProductosMasVendidos(facturas) {\n      const cantPorProducto = {};\n      facturas.forEach(f => {\n        const items = f.items ? Object.values(f.items) : [];\n        items.forEach(it => {\n          // Usamos SIEMPRE el nombre si existe; si no, un placeholder fijo\n          const key = it?.producto_nombre && String(it.producto_nombre).trim() ? String(it.producto_nombre).trim() : 'Producto sin nombre';\n          const cant = Number(it?.cantidad) || 0;\n          if (cant > 0) {\n            cantPorProducto[key] = (cantPorProducto[key] || 0) + cant;\n          }\n        });\n      });\n      const entradas = Object.entries(cantPorProducto).sort((a, b) => b[1] - a[1]);\n      if (!entradas.length) {\n        if (this.chartProductos) {\n          this.chartProductos.destroy();\n          this.chartProductos = null;\n        }\n        return;\n      }\n      // 🔥 Solo TOP 6 — SIN “Otros”\n      const top = entradas.slice(0, 6);\n      const labels = top.map(([n]) => n);\n      const data = top.map(([, c]) => c);\n      // Aseguramos que la cantidad de colores coincida con la cantidad de datos\n      const baseColors = ['#4e79a7', '#f28e2b', '#e15759', '#76b7b2', '#59a14f', '#edc949'];\n      const bgColors = baseColors.slice(0, data.length);\n      if (this.chartProductos) this.chartProductos.destroy();\n      this.chartProductos = new Chart(this.productosChartRef.nativeElement, {\n        type: 'doughnut',\n        data: {\n          labels,\n          datasets: [{\n            label: 'Unidades vendidas',\n            data,\n            backgroundColor: bgColors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'bottom'\n            },\n            tooltip: {\n              callbacks: {\n                label: ctx => {\n                  const val = ctx.parsed;\n                  const total = ctx.dataset.data.reduce((a, b) => a + b, 0);\n                  const pct = total ? (val / total * 100).toFixed(1) : '0.0';\n                  return ` ${ctx.label}: ${val} (${pct}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n    static ɵfac = function EstadisticasComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || EstadisticasComponent)(i0.ɵɵdirectiveInject(i1.FacturaService), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EstadisticasComponent,\n      selectors: [[\"app-estadisticas\"]],\n      viewQuery: function EstadisticasComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ventasChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dolarChartRef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.productosChartRef = _t.first);\n        }\n      },\n      decls: 27,\n      vars: 9,\n      consts: [[\"ventasChart\", \"\"], [\"dolarChart\", \"\"], [\"productosChart\", \"\"], [1, \"container\", \"mt-4\"], [1, \"titulo-grafico\"], [1, \"filtro-group\"], [1, \"filtro-btn\", 3, \"click\"], [1, \"chart-container\"], [1, \"titulo-grafico\", \"mt-5\"], [\"class\", \"text-danger mt-2\", \"style\", \"text-align:center;\", 4, \"ngIf\"], [1, \"text-danger\", \"mt-2\", 2, \"text-align\", \"center\"]],\n      template: function EstadisticasComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 3)(1, \"h2\", 4);\n          i0.ɵɵtext(2, \"Estad\\u00EDsticas de Ventas\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 5)(4, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function EstadisticasComponent_Template_button_click_4_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.actualizarAgrupacion(\"dia\"));\n          });\n          i0.ɵɵtext(5, \" Por D\\u00EDa \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function EstadisticasComponent_Template_button_click_6_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.actualizarAgrupacion(\"semana\"));\n          });\n          i0.ɵɵtext(7, \" Por Semana \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function EstadisticasComponent_Template_button_click_8_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.actualizarAgrupacion(\"mes\"));\n          });\n          i0.ɵɵtext(9, \" Por Mes \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 7);\n          i0.ɵɵelement(11, \"canvas\", null, 0);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"h2\", 8);\n          i0.ɵɵtext(14, \"Evoluci\\u00F3n del d\\u00F3lar (USD/ARS)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 5)(16, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function EstadisticasComponent_Template_button_click_16_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.cargarDolar(7));\n          });\n          i0.ɵɵtext(17, \"1 semana\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(18, \"div\", 7);\n          i0.ɵɵelement(19, \"canvas\", null, 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(21, EstadisticasComponent_div_21_Template, 2, 1, \"div\", 9);\n          i0.ɵɵelementStart(22, \"h2\", 8);\n          i0.ɵɵtext(23, \"Productos m\\u00E1s vendidos\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 7);\n          i0.ɵɵelement(25, \"canvas\", null, 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"activo\", ctx.periodo === \"dia\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"activo\", ctx.periodo === \"semana\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"activo\", ctx.periodo === \"mes\");\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"activo\", ctx.rangoDolarDias === 7);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorDolar);\n        }\n      },\n      dependencies: [CommonModule, i3.NgIf, RouterModule, HttpClientModule],\n      styles: [\".container[_ngcontent-%COMP%]{max-width:900px;margin:40px auto;padding:0 20px;text-align:center}.titulo-grafico[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;margin-bottom:20px}.filtro-group[_ngcontent-%COMP%]{display:flex;justify-content:center;gap:10px;margin-bottom:30px}.filtro-btn[_ngcontent-%COMP%]{background-color:#f0f0f0;border:none;border-radius:25px;padding:10px 18px;font-size:1rem;font-weight:500;color:#333;cursor:pointer;transition:.2s ease-in-out}.filtro-btn[_ngcontent-%COMP%]:hover{background-color:#007bff;color:#fff;transform:scale(1.05)}.filtro-btn.activo[_ngcontent-%COMP%]{background-color:#007bff;color:#fff}.chart-container[_ngcontent-%COMP%]{width:100%;max-width:720px;margin:0 auto;background:#f9f9f9;padding:25px;border-radius:16px;box-shadow:0 8px 20px #00000014}canvas[_ngcontent-%COMP%]{max-width:100%}.chart-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{height:360px!important}\"]\n    });\n  }\n  return EstadisticasComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}