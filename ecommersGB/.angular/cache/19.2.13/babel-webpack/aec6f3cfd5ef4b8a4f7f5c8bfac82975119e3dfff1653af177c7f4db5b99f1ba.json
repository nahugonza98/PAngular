{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nahuel/Documents/Proyectos/PAngular-master/PAngular-master/ecommersGB/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '../environments/environments';\nlet cached = null;\nexport function getFirebase() {\n  return _getFirebase.apply(this, arguments);\n}\n// ----------------- HELPERS PARA RTDB -----------------\n/** Devuelve una referencia a un path de la Realtime Database */\nfunction _getFirebase() {\n  _getFirebase = _asyncToGenerator(function* () {\n    if (cached) return cached;\n    // Importes dinámicos (no se ejecutan en SSR)\n    const {\n      getApps,\n      getApp,\n      initializeApp\n    } = yield import('firebase/app');\n    const {\n      getAuth\n    } = yield import('firebase/auth');\n    const {\n      getDatabase\n    } = yield import('firebase/database');\n    const app = getApps().length ? getApp() : initializeApp(environment.firebase);\n    cached = {\n      app,\n      auth: getAuth(app),\n      database: getDatabase(app) // ✅ CAMBIO\n    };\n    return cached;\n  });\n  return _getFirebase.apply(this, arguments);\n}\nexport function getDbReference(_x) {\n  return _getDbReference.apply(this, arguments);\n}\n/** Lee una vez el valor de un nodo (una snapshot puntual) */\nfunction _getDbReference() {\n  _getDbReference = _asyncToGenerator(function* (path) {\n    const {\n      ref\n    } = yield import('firebase/database');\n    const {\n      database\n    } = yield getFirebase(); // ✅ CAMBIO\n    return ref(database, path);\n  });\n  return _getDbReference.apply(this, arguments);\n}\nexport function getNodeValue(_x2) {\n  return _getNodeValue.apply(this, arguments);\n}\n/** Escucha en tiempo real los cambios de un nodo. Devuelve una función para cancelar la suscripción */\nfunction _getNodeValue() {\n  _getNodeValue = _asyncToGenerator(function* (path) {\n    const {\n      get\n    } = yield import('firebase/database');\n    const reference = yield getDbReference(path);\n    const snapshot = yield get(reference);\n    return snapshot.exists() ? snapshot.val() : null;\n  });\n  return _getNodeValue.apply(this, arguments);\n}\nexport function listenToNode(_x3, _x4) {\n  return _listenToNode.apply(this, arguments);\n}\n/** Convierte un objeto {id: {...}} en un array [{id, ...}] para trabajar más fácil en Angular */\nfunction _listenToNode() {\n  _listenToNode = _asyncToGenerator(function* (path, callback) {\n    const {\n      onValue\n    } = yield import('firebase/database');\n    const reference = yield getDbReference(path);\n    const unsubscribe = onValue(reference, snapshot => {\n      callback(snapshot.exists() ? snapshot.val() : null);\n    });\n    return () => unsubscribe();\n  });\n  return _listenToNode.apply(this, arguments);\n}\nexport function getListFromNode(_x5) {\n  return _getListFromNode.apply(this, arguments);\n}\nfunction _getListFromNode() {\n  _getListFromNode = _asyncToGenerator(function* (path) {\n    const data = yield getNodeValue(path);\n    return Object.entries(data ?? {}).map(([id, value]) => ({\n      id,\n      ...value\n    }));\n  });\n  return _getListFromNode.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}